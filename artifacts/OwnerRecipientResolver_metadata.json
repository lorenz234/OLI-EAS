{
	"compiler": {
		"version": "0.8.27+commit.40a35a09"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IEAS",
						"name": "eas",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessDenied",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidEAS",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotPayable",
				"type": "error"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "attest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPayable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation[]",
						"name": "attestations",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "multiAttest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation[]",
						"name": "attestations",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "multiRevoke",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "revoke",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"params": {
						"attestation": "The new attestation."
					},
					"returns": {
						"_0": "Whether the attestation is valid."
					}
				},
				"isPayable()": {
					"returns": {
						"_0": "Whether the resolver supports ETH transfers."
					}
				},
				"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"params": {
						"attestations": "The new attestations.",
						"values": "Explicit ETH amounts which were sent with each attestation."
					},
					"returns": {
						"_0": "Whether all the attestations are valid."
					}
				},
				"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"params": {
						"attestations": "The existing attestations to be revoked.",
						"values": "Explicit ETH amounts which were sent with each revocation."
					},
					"returns": {
						"_0": "Whether the attestations can be revoked."
					}
				},
				"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"params": {
						"attestation": "The existing attestation to be revoked."
					},
					"returns": {
						"_0": "Whether the attestation can be revoked."
					}
				},
				"version()": {
					"returns": {
						"_0": "Semver contract version as a string."
					}
				}
			},
			"title": "A schema resolver that checks whether the sender is the owner of the contract behind attestation.recipient.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"notice": "Processes an attestation and verifies whether it's valid."
				},
				"isPayable()": {
					"notice": "Checks if the resolver can be sent ETH."
				},
				"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"notice": "Processes multiple attestations and verifies whether they are valid."
				},
				"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"notice": "Processes revocation of multiple attestation and verifies they can be revoked."
				},
				"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"notice": "Processes an attestation revocation and verifies if it can be revoked."
				},
				"version()": {
					"notice": "Returns the full semver contract version."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"resolver.sol": "OwnerRecipientResolver"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed",
			"license": "MIT",
			"urls": [
				"bzz-raw://0564ddb19c6d870e27b789d8f985283d815267ad7224883c2d5243c8bacc7dc0",
				"dweb:/ipfs/QmeC953H4sj88ZRFdJNFdmpf7J9SksP1wK4jyMHLo66z49"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
				"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"EAS/Common.sol": {
			"keccak256": "0x9007deeeb757cfd4c504887f0c82b49f43fe92de13f4ffd9400f457d8c5276c6",
			"license": "MIT",
			"urls": [
				"bzz-raw://949de4842085918b42d71c50f837b468e77871fc1417f480d2a6618f75eeb57d",
				"dweb:/ipfs/QmbyYxXLvryZBHdNKijCmZzwsgU4bnTXszyA38F5Xdg5h1"
			]
		},
		"EAS/IEAS.sol": {
			"keccak256": "0xdc4fed434a7d7907767ba1dc6a8e9ddc94ede6df08fbea5d827077ef22e8bd8c",
			"license": "MIT",
			"urls": [
				"bzz-raw://297555c22ff767608088c01ba2efe6da4dff7e95b7eb614e09d72cb36d0c989b",
				"dweb:/ipfs/QmQ7YWcBxiaf2mXZL1VLFsYSJPtVTHbWSBuimATVLMC7U4"
			]
		},
		"EAS/ISchemaRegistry.sol": {
			"keccak256": "0x9f23d5b875dd34e36512ff4ba75615ac5eb56ee20c6451ef2b70da99d95bf006",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad6ef991e5d45128cd5632b88088b4c2fc65153f1da313fb6b603f7db0f27749",
				"dweb:/ipfs/QmQGxZEmQ7xYiCVQFEp9N2jjBtJYKd1CYNUNGoGYmV2F47"
			]
		},
		"EAS/ISchemaResolver.sol": {
			"keccak256": "0x4df78a9ec7244d6f75d58b01c223e865316e16a071eb9d36d28adddcb784d787",
			"license": "MIT",
			"urls": [
				"bzz-raw://0399b3b62b3f95f12a6f09c397249dbf7f517fc6a2a0bc1be1cd0cc962d85888",
				"dweb:/ipfs/QmYozmYWNnntXQaiVigovQRJuVoxHg78btYxZrLwMDQfx8"
			]
		},
		"EAS/ISemver.sol": {
			"keccak256": "0x6c6073e407395170dfc58d74be5e4cba5d2f6680d2c9aeade07e591dd7c6d5bf",
			"license": "MIT",
			"urls": [
				"bzz-raw://40f57462c6e329fcf5960e75e9f9a405429f416fec1debcfd4c79c2f10c04dd4",
				"dweb:/ipfs/QmehZy36QoFsBKMMbCo5Jmta5y3uU3so4e4C14MHzx2VDp"
			]
		},
		"EAS/SchemaResolver.sol": {
			"keccak256": "0xb6dc636c973996ca481d6522decae3ecae8c043c8d2ca5228e8f53a6c0210951",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7f2f9db27662ba6aea6be58351e1cc834a1c84122a6cecfcb6d293628a1364",
				"dweb:/ipfs/QmTkQ7gDaJaY4tgneQyNxmbz9AovJQmMfuZgG8akbAqu5K"
			]
		},
		"EAS/Semver.sol": {
			"keccak256": "0xcb67b60a08b4acb41ccda1ee2a44bb3d4291f3da9ecd60eed49991bdbfafb972",
			"license": "MIT",
			"urls": [
				"bzz-raw://eea3e91b983ce442be39c0a88c93627043d1c6de342be99562916a948a5933e3",
				"dweb:/ipfs/QmTFeE2vsjwn1pNeSMWAoQ4NivUTHza5DYMgJA854Ddx8F"
			]
		},
		"resolver.sol": {
			"keccak256": "0xea2961d2fcbb40eadd6a3ecba41c82c57a5fb7e6375ffcc1a393a0547b67d953",
			"license": "MIT",
			"urls": [
				"bzz-raw://ede3a972441e2ffa70a0d440bf8d8570fe002649f969cbc5abcb7c05198554da",
				"dweb:/ipfs/QmPVP51wkgv8gm7fJZ3evGqCyqa3vrU7U9AA3hNmveWfYB"
			]
		}
	},
	"version": 1
}